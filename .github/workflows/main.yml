on:
  workflow_dispatch

env:
  AWS_REGION: us-east-1
  ECR_REPOSITORY: vprofileapp
  EKS_CLUSTER: vprofile-aws-eks

jobs:
  Testing:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Maven test
        run: mvn test

      - name: checkstyle
        run: mvn checkstyle:checkstyle

      # Setup Java 11 to be default (SonarQube requires Java 11 as of version 5.x)
      - name: Setup JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'  # see 'supported destributions' for available
          java-version: '11'
          cache: maven

      # setup sonar-scanner
      - name: Setup sonarQube
        uses: warchant/setup-sonar-scanner@v7 

      # Setup SonarScanner
      - name: Setup SonarQube
        run: sonar-scanner 
         -Dsonar.host.url=${{ secrets.SONAR_URL }}
         -Dsonar.login=${{ secrets.SONAR_TOKEN }}
         -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION }}
         -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }} 
         -Dsonar.sources=src/
         -Dsonar.junit.reportsPath=target/surefire-reports/
         -Dsonar.jacoco.reportPaths=target/jacoco.exec
         -Dsonar.java.checkstyle.reportPaths=target/checkstyle-result.xml
         -Dsonar.java.binaries=target/test-classes/com/visualpathit/account

      # Check the quality gate status
      - name: SonarQube Quality Gate check
        id: sonarqube-quality-gate-check
        uses: sonarsource/sonarqube-quality-gate-action@master
           # Force to fail steps after specific time
        timeout-minutes: 5
        env:
         SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
         SONAR_URL: ${{ secrets.SONAR_URL }} # optional

  BUILD_AND_PUBLISH:
    needs: Testing
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: upload image to ECR
        uses: appleboy/docker-ecr-action@master
        with:
          access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          registry: ${{ secrets.REGISTRY }}
          region: ${{ env.AWS_REGION }}
          repo: ${{ env.ECR_REPOSITORY }} 
          tags: latest,${{ github.run_number }}
          daemon_off: false
          dockerfile: ./Dockerfile
          context: ./

  DeloyToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-config --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}


      - name: Print config file 
        run: cat ~/.kube/config

      - name: Login to ECR
        run: kubectl create secret docker-registry regcred --docker-server=${{ secrets.REGISTRY }} --docker-username=AWS --docker-password=$(aws ecr get-login-password)

  DeployToEKS:
    needs: BUILD_AND_PUBLISH
    runs-on: ubuntu-latest
    steps:
      - name: Code Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region:  ${{ env.AWS_REGION }}

      - name: Get Kube config file
        run: aws eks update-config --region ${{ env.AWS_REGION }} --name ${{ env.EKS_CLUSTER }}

      - name: Print config file 
        run: cat ~/.kube/config

      - name: Login to ECR
        run: aws ecr get-login-password --region ${{ env.AWS_REGION }} | docker login --username AWS --password-stdin ${{ secrets.REGISTRY }}

      - name: Deploy Helm
        uses: bitovi/github-actions-deploy-eks-helm@v1.2.9
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}
          cluster-name: ${{ env.EKS_CLUSTER }}
          chart-path: helm/vprofilecharts
          namespace: default
          values: appimage=${{ secrets.REGISTRY }}/${{ env.ECR_REPOSITORY }},apptag=${{ github.run_number }}
          name: vprofile-stack
      